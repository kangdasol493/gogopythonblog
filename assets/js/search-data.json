{
  
    
        "post0": {
            "title": "함수",
            "content": ". dir(__builtins__) . [&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;, &#39;BaseException&#39;, &#39;BlockingIOError&#39;, &#39;BrokenPipeError&#39;, &#39;BufferError&#39;, &#39;BytesWarning&#39;, &#39;ChildProcessError&#39;, &#39;ConnectionAbortedError&#39;, &#39;ConnectionError&#39;, &#39;ConnectionRefusedError&#39;, &#39;ConnectionResetError&#39;, &#39;DeprecationWarning&#39;, &#39;EOFError&#39;, &#39;Ellipsis&#39;, &#39;EnvironmentError&#39;, &#39;Exception&#39;, &#39;False&#39;, &#39;FileExistsError&#39;, &#39;FileNotFoundError&#39;, &#39;FloatingPointError&#39;, &#39;FutureWarning&#39;, &#39;GeneratorExit&#39;, &#39;IOError&#39;, &#39;ImportError&#39;, &#39;ImportWarning&#39;, &#39;IndentationError&#39;, &#39;IndexError&#39;, &#39;InterruptedError&#39;, &#39;IsADirectoryError&#39;, &#39;KeyError&#39;, &#39;KeyboardInterrupt&#39;, &#39;LookupError&#39;, &#39;MemoryError&#39;, &#39;ModuleNotFoundError&#39;, &#39;NameError&#39;, &#39;None&#39;, &#39;NotADirectoryError&#39;, &#39;NotImplemented&#39;, &#39;NotImplementedError&#39;, &#39;OSError&#39;, &#39;OverflowError&#39;, &#39;PendingDeprecationWarning&#39;, &#39;PermissionError&#39;, &#39;ProcessLookupError&#39;, &#39;RecursionError&#39;, &#39;ReferenceError&#39;, &#39;ResourceWarning&#39;, &#39;RuntimeError&#39;, &#39;RuntimeWarning&#39;, &#39;StopAsyncIteration&#39;, &#39;StopIteration&#39;, &#39;SyntaxError&#39;, &#39;SyntaxWarning&#39;, &#39;SystemError&#39;, &#39;SystemExit&#39;, &#39;TabError&#39;, &#39;TimeoutError&#39;, &#39;True&#39;, &#39;TypeError&#39;, &#39;UnboundLocalError&#39;, &#39;UnicodeDecodeError&#39;, &#39;UnicodeEncodeError&#39;, &#39;UnicodeError&#39;, &#39;UnicodeTranslateError&#39;, &#39;UnicodeWarning&#39;, &#39;UserWarning&#39;, &#39;ValueError&#39;, &#39;Warning&#39;, &#39;ZeroDivisionError&#39;, &#39;__IPYTHON__&#39;, &#39;__build_class__&#39;, &#39;__debug__&#39;, &#39;__doc__&#39;, &#39;__import__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;abs&#39;, &#39;all&#39;, &#39;any&#39;, &#39;ascii&#39;, &#39;bin&#39;, &#39;bool&#39;, &#39;breakpoint&#39;, &#39;bytearray&#39;, &#39;bytes&#39;, &#39;callable&#39;, &#39;chr&#39;, &#39;classmethod&#39;, &#39;compile&#39;, &#39;complex&#39;, &#39;copyright&#39;, &#39;credits&#39;, &#39;delattr&#39;, &#39;dict&#39;, &#39;dir&#39;, &#39;display&#39;, &#39;divmod&#39;, &#39;dreload&#39;, &#39;enumerate&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;execfile&#39;, &#39;filter&#39;, &#39;float&#39;, &#39;format&#39;, &#39;frozenset&#39;, &#39;get_ipython&#39;, &#39;getattr&#39;, &#39;globals&#39;, &#39;hasattr&#39;, &#39;hash&#39;, &#39;help&#39;, &#39;hex&#39;, &#39;id&#39;, &#39;input&#39;, &#39;int&#39;, &#39;isinstance&#39;, &#39;issubclass&#39;, &#39;iter&#39;, &#39;len&#39;, &#39;license&#39;, &#39;list&#39;, &#39;locals&#39;, &#39;map&#39;, &#39;max&#39;, &#39;memoryview&#39;, &#39;min&#39;, &#39;next&#39;, &#39;object&#39;, &#39;oct&#39;, &#39;open&#39;, &#39;ord&#39;, &#39;pow&#39;, &#39;print&#39;, &#39;property&#39;, &#39;range&#39;, &#39;repr&#39;, &#39;reversed&#39;, &#39;round&#39;, &#39;runfile&#39;, &#39;set&#39;, &#39;setattr&#39;, &#39;slice&#39;, &#39;sorted&#39;, &#39;staticmethod&#39;, &#39;str&#39;, &#39;sum&#39;, &#39;super&#39;, &#39;tuple&#39;, &#39;type&#39;, &#39;vars&#39;, &#39;zip&#39;] . import calendar # calendar 모듈 import print(calendar.month(2021,5)) # 달력 년월을 지정 출력 . May 2021 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 . from calendar import . import datetime date1 = datetime.date.today() date2 = datetime.date(1994,12,23) print(date1-date2) . 9658 days, 0:00:00 . import random a = random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 #2개의 숫자 사이의 랜덤 실수를 리턴합니다. b = random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 #2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) c =random.randint(1, 10) # Integer from 1 to 10, endpoints included #range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. d=random.randrange(0, 101, 2) # Even integer from 0 to 100 #choice() 함수 랜덤하게 하나의 원소를 선택합니다. e = random.choice(&#39;abcdefghij&#39;) # Choose a random element f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) a=[&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;] random.shuffle(a) print(a) print(a,b,c,d,e,f) . [&#39;바위&#39;, &#39;보&#39;, &#39;가위&#39;] [&#39;바위&#39;, &#39;보&#39;, &#39;가위&#39;] 9.83615143407867 5 88 a 가위 . def say_hello(): print(&#39;안녕하세요!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello() . 안녕하세요!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . def say_hello(name): print(f&#39;안녕하세요, {name}님!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;강다솔&#39;) . 안녕하세요, 강다솔님!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . def circle_area(radius): area = 3.14 * radius ** 2 return area circle_area(5) . 78.5 . def get_plus(num1,num2): result = num1 + num2 return result get_plus(1,2) . 3 . def get_minus(num1,num2): result = num1 - num2 return result get_minus(1,2) . -1 . def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 return plus,minus get_plus_minus(1,2) . (3, -1) . def get_multi(num1,num2): result = num1 * num2 return result get_multi(1,2) . 2 . def get_division(num1,num2): result = num1 / num2 return result get_division(1,2) . 0.5 . def get_plu_min_mul_div(num1,num2): plu = num1 + num2 min = num1 - num2 mul = num1 * num2 if num2 == 0: print(&#39;두 번째 변수에 다른 수를 입력하세요.&#39;) else: div = num1 / num2 return plu,min,mul,div get_plu_min_mul_div(4,2) . (6, 2, 8, 2.0) . # 함수 밖에서 생성한 변수를 &#39;전역변수&#39;라 한다. # 함수내 변수를 밖에서 사용 못함 def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 return plus,minus # get_plus_minus(1,2) print(plus,minus) #오류 . NameError Traceback (most recent call last) &lt;ipython-input-31-0931eb978c32&gt; in &lt;module&gt;() 8 return plus,minus 9 # get_plus_minus(1,2) &gt; 10 print(plus,minus) NameError: name &#39;plus&#39; is not defined . def circle_area(): area = 3.14 * radius ** 2 return area radius = float(input(&#39;반지름:&#39;)) circle_area() . 반지름:5 . 78.5 . ※ 함수 안에서 전역변수의 값을 변경하려면 global 키워드를 사용해야 한다. . def circle_area(): area = 3.14 * radius ** 2 return area area = 0 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) # 변경안됨 . 반지름:5 원의 넓이: 78.5 0 . def circle_area(): global area # &lt;- gloal 키워드 사용 area = 3.14 * radius ** 2 return area area = 0 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) # 변경 . 반지름:5 원의 넓이: 78.5 78.5 . 디폴트 인수 &gt; 인수가 부족한 경우, 기본값을 사용할 수 있다. . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;,&#39;좋은 아침이야&#39;) . 안녕 철수,좋은 아침이야 . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;) . TypeError Traceback (most recent call last) &lt;ipython-input-37-f03df1934f4c&gt; in &lt;module&gt;() 2 def greet(name,msg): 3 print(f&#39;안녕 {name},{msg}&#39;) -&gt; 4 greet(&#39;철수&#39;) TypeError: greet() missing 1 required positional argument: &#39;msg&#39; . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;,&#39;오랜만이야&#39;) . 안녕 영희,오랜만이야 . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;) . 안녕 영희,잘 지내니? . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet() . 안녕 친구,잘 지내니? . 키워드 인수 &gt; 위치 인수와 키워드 인수를 혼합해서 사용할 수 있지만, 위치인수를 먼저 사용해야 한다. . def calc(x,y,z): result = x,y,z return result calc(x=1,z=5,y=3) . (1, 3, 5) . def calc(x,y,z): result = x,y,z return result calc(1,z=5,y=3) # 위치 인수를 먼저 사용 . def calc(x,y,z): result = x,y,z return result calc(x=1,5,y=3) # 키워드 인수를 먼저 쓰면 에러!!!!! . def calc(x,y,z): result = x,y,z return result calc(x=1,z=5,y=3) . &#47588;&#44060;&#48320;&#49688; *args . def average(*args): avrg1 = sum(args) /len(args) #args는 튜플 데이터형 return avrg1 print(average(1,2,3)) # 인수 3개 print(average(1,2,3,4,5)) # 인수 5개 . 2.0 3.0 . def average(*args): print(args) avrg1 = sum(args) / len(args) return avrg1 print(average(1,2,3)) print(average(1,2,3,4,5)) . (1, 2, 3) 2.0 (1, 2, 3, 4, 5) 3.0 . def is_prime(num): #소수여부 판단하여 리턴 #소수:True, 소수아님:False if num &lt; 2: return False for i in range(2,num): if num % i ==0: return False return True input_num = int(input(&#39;숫자:&#39;)) if is_prime(input_num): print(&#39;소수입니다.&#39;) else: print(&#39;소수가 아닙니다.&#39;) . 숫자:89 소수입니다. . def is_even(num): # 짝수여부 판단하여 리턴 # 짝수:True, 짝수아님:False if num % 2 == 0 : return True else: return False input_num = int(input(&#39;숫자:&#39;)) if is_even(input_num): print(&#39;짝수입니다.&#39;) else: print(&#39;짝수가 아닙니다.&#39;) . 숫자:10 짝수입니다. . def even(num): if num % 2 == 0: print(&#39;짝수입니다.&#39;) else: print(&#39;홀수입니다.&#39;) input_num = int(input(&#39;수를 입력하세요: &#39;)) even(input_num) . 수를 입력하세요: 6 짝수입니다. . def today_menu(*args): for i in args: print(i) print(&#39;== 오늘의 메뉴 ==&#39;) today_menu(&#39;김밥&#39;,&#39;떡볶이&#39;,&#39;튀김&#39;) . == 오늘의 메뉴 == 김밥 떡볶이 튀김 . def today_menu(*menu): for i in range(len(menu)): print(menu[i]) print(&#39;== 오늘의 메뉴 ==&#39;) today_menu(&#39;김밥&#39;,&#39;떡볶이&#39;,&#39;튀김&#39;,&#39;순대&#39;) . == 오늘의 메뉴 == 김밥 떡볶이 튀김 순대 . def plus(num1,num2): result = num1 + num2 return result print(plus(10,20)) plus = lambda num1,num2 : num1 + num2 print(plus(10,20)) . 30 30 . # 첫번째 인자는 함수명, 두번째 인자는 순서가 있는 자료형 mylist = [1,2,3,4,5] plus10 = lambda num : num+10 mylist = list(map(plus10,mylist)) print(mylist) . [11, 12, 13, 14, 15] . mylist = [&#39;나의아저씨&#39;,&#39;멜로가체질&#39;,&#39;로스쿨&#39;] pluslove = lambda drama : drama + &#39; 짱!!&#39; mylist = list(map(pluslove,mylist)) print(mylist) . [&#39;나의아저씨 짱!!&#39;, &#39;멜로가체질 짱!!&#39;, &#39;로스쿨 짱!!&#39;] . 재귀함수 . # 재귀호출은 일반적인 상황에서는 잘 사용하지 않지만 알고리즘을 구현할 때 매우 유용 def hello(count): if count == 0: # 종료 조건을 만들어야함 count가 0이면 다시 호출하지 않고 끝냄 return print(&#39;Hello, World!&#39;, count) count -= 1 # count를 1 감소시킨 뒤 hello(count) # 다시 hello에 넣음 hello(3) # hello 함수 호출 . Hello, World! 3 Hello, World! 2 Hello, World! 1 . def factorial(num): if num == 1: # 종료 조건을 만들어야함 count가 0이면 다시 호출하지 않고 끝냄 return 1 factorial=num*factorial(num-1) factorial(5) . UnboundLocalError Traceback (most recent call last) &lt;ipython-input-119-43a2ec6de67f&gt; in &lt;module&gt;() 4 factorial=num*factorial(num-1) 5 -&gt; 6 factorial(5) &lt;ipython-input-119-43a2ec6de67f&gt; in factorial(num) 2 if num == 1: # 종료 조건을 만들어야함 count가 0이면 다시 호출하지 않고 끝냄 3 return 1 -&gt; 4 factorial=num*factorial(num-1) 5 6 factorial(5) UnboundLocalError: local variable &#39;factorial&#39; referenced before assignment . def factorial(num): if num == 1: # 종료 조건을 만들어야함 count가 0이면 다시 호출하지 않고 끝냄 return 1 print(num) return num * factorial(num-1) print(factorial(5)) . 5 4 3 2 120 . &#50696;&#51228;_&#54200;&#51032;&#51216;&#51116;&#44256;&#44288;&#47532;&#49884;&#49828;&#53596; . dict_prod = {&#39;삼각김밥&#39;:5,&#39;샌드위치&#39;:3,&#39;초코우유&#39;:10,&#39;커피우유&#39;:20} # 1.재고등록 def register(): while True: name=input(&#39;상품명:&#39;) if name ==&#39;&#39;: break num=int(input(&#39;개수:&#39;)) if name in dict_prod: dict_prod[name] += num else: dict_prod[name] = num print(&#39;-&#39;*50) for key, value in dict_prod.items(): print(f&#39;{key} : {value}&#39;) # 2.제품판매 def sell(): while True: name=input(&#39;상품명:&#39;) if name == &#39;&#39;: break if name not in dict_prod: print(&#39;상품명을 정확히 입력하세요.&#39;) elif name in dict_prod: num=int(input(&#39;개수:&#39;)) if num &gt; dict_prod[name]: print(&#39;재고가 부족합니다.&#39;) else: dict_prod[name] -= num print(&#39;-&#39;*50) print(f&#39;{dict_prod[name]} 개 남았습니다.&#39;) # 3.재고확인 def check(): while True: name=input(&#39;상품명을 입력하세요(전체조회는&quot;전체상품&quot;):&#39;) if name == &#39;&#39;: break if name == &#39;전체상품&#39;: print(&#39;-&#39;*50) for key, value in dict_prod.items(): print(f&#39;{key} : {value}&#39;) break if name not in dict_prod: print(&#39;상품명을 정확히 입력하세요.&#39;) elif name in dict_prod: print(&#39;-&#39;*50) print(f&#39;{name} : {dict_prod.get(name)} 개&#39;) # get[name]이라고 쓰면 오류난다!! 이유 한참 찾음.. while True: print(&#39;&#39;&#39; ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 &#39;&#39;&#39;) menu= input(&#39;메뉴를 선택하세요:&#39;) if menu == &#39;0&#39;: break elif menu == &#39;1&#39;: print(&#39;1:재고등록&#39;) register() elif menu == &#39;2&#39;: print(&#39;2:제품판매&#39;) sell() elif menu == &#39;3&#39;: print(&#39;3:재고확인&#39;) check() . ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요:3 3:재고확인 상품명을 입력하세요(전체조회는&#34;전체상품&#34;):바나나우유 상품명을 정확히 입력하세요. 상품명을 입력하세요(전체조회는&#34;전체상품&#34;):초코우유 -- 초코우유 : 10 개 상품명을 입력하세요(전체조회는&#34;전체상품&#34;):삼각김밥 -- 삼각김밥 : 5 개 상품명을 입력하세요(전체조회는&#34;전체상품&#34;):전체상품 -- 삼각김밥 : 5 샌드위치 : 3 초코우유 : 10 커피우유 : 20 ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요: ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요:0 . dict_menus = {} def registration(): # 1.재고등록 while True: name = input(&#39;상품명:&#39;) if name == &#39;&#39;: break num = int(input(&#39;갯수:&#39;)) if name in dict_menus: dict_menus[name] += num else: dict_menus[name] = num print(&#39;-&#39;) for key, value in dict_menus.items(): print(f&#39;{key} : {value}&#39;) def sale(): # 2.제품판매 while True: name = input(&#39;상품명:&#39;) if name == &#39;&#39;: break num = int(input(&#39;갯수:&#39;)) if num&gt;dict_menus[name]: print(&#39;재고가 부족합니다.&#39;) else: dict_menus[name] -= num print(f&#39;{dict_menus[name]}개 남았습니다.&#39;) def check(): # 3.재고확인 for key, value in dict_menus.items(): print(f&#39;{key} : {value}&#39;) while True: print(&#39;&#39;&#39; ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 &#39;&#39;&#39;) menu = input(&#39;메뉴를 선택하세요:&#39;) if menu==&#39;0&#39;: break elif menu==&#39;1&#39;: registration() elif menu==&#39;2&#39;: sale() elif menu==&#39;3&#39;: check() . ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요:1 상품명:바나나 갯수:3 상품명: - 바나나 : 3 ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요:2 상품명:바나나 갯수:3 0개 남았습니다. 상품명: ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요:3 바나나 : 0 ===== 재고관리 시스템 ===== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요:0 .",
            "url": "https://kangdasol493.github.io/gogopythonblog/2021/06/06/_06_02_6%ED%8C%80_%EA%B0%95%EB%8B%A4%EC%86%94_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8.html",
            "relUrl": "/2021/06/06/_06_02_6%ED%8C%80_%EA%B0%95%EB%8B%A4%EC%86%94_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kangdasol493.github.io/gogopythonblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kangdasol493.github.io/gogopythonblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kangdasol493.github.io/gogopythonblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kangdasol493.github.io/gogopythonblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}